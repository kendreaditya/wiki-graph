{"version":3,"sources":["components/api.js","components/search.js","components/preview.js","App.js","index.js"],"names":["url","getLinks","id","get","a","plcontinue","links_url","fetch","then","res","json","response","Object","keys","query","pages","forEach","pageid","links","push","title","continue","catch","error","console","log","params","action","pageids","generator","format","gpllimit","inprop","key","Search","setGraphData","value","depth","React","useState","searchTerm","setSearchTerm","articles","setArticles","useEffect","term","list","srsearch","search_url","search","Autocomplete","onChange","event","newValue","options","getOptionLabel","option","style","width","float","freeSolo","renderInput","TextField","autoFocus","label","variant","target","maxWidth","Button","onClick","Preview","articleName","node","replace","src","App","setValue","setDepth","renderedGraph","setRenderedGraph","selectedNode","setSelectedNode","allNodes","Map","renderGraph","nodes","reduce","result","edge","has","set","graphNodes","map","link","source","graphLinks","length","fill","getAllLinks","rootPage","_links","page","pageLinks","pageGraphNodes","pageGraphLinks","i","pageNodes","flat","className","textAlign","onSelectNode","simulationOptions","animate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bb251380.chunk.js","sourcesContent":["var url = \"https://en.wikipedia.org/w/api.php\"; \r\nexport var pageURL = \"https://en.m.wikipedia.org/wiki\";\r\n\r\nexport const search = (term) => {\r\n    let params = {\r\n        action: \"query\",\r\n        list: \"search\",\r\n        srsearch: term,\r\n        format: \"json\"\r\n    };\r\n    \r\n    let search_url = url + \"?origin=*\";\r\n    Object.keys(params).forEach(function(key){search_url += \"&\" + key + \"=\" + params[key];});\r\n\r\n    return fetch(search_url)\r\n        .then((response) => response.json())\r\n        .catch((error) => error);\r\n    \r\n}\r\n\r\nexport async function getLinks(id) {\r\n    let links = [];\r\n\r\n    // let params = {\r\n    //     action: \"query\",\r\n    //     prop: \"links\",\r\n    //     pageids: id,\r\n    //     pllimit: 500,\r\n    //     format: \"json\",\r\n    // };\r\n\r\n    let params = {\r\n        action: \"query\",\r\n        pageids: id,\r\n        generator: \"links\",\r\n        format: \"json\",\r\n        gpllimit: \"20\",\r\n        inprop: \"url\"\r\n    };\r\n\r\n    let links_url = url + \"?origin=*\";\r\n    Object.keys(params).forEach(function(key){links_url += \"&\" + key + \"=\" + params[key];});\r\n\r\n    // Continue function\r\n    async function get(plcontinue=null) {\r\n        if(plcontinue)\r\n            links_url = links_url + `&plcontinue=${plcontinue}`\r\n            await fetch(links_url)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                Object.keys(response.query.pages).forEach((pageid)=>{\r\n                    links.push({\r\n                        pageid: pageid,\r\n                        title: response.query.pages[pageid].title\r\n                    })\r\n                })\r\n                // response.query.pages[id].links.forEach((article) => {links.push(article.title)})\r\n\r\n                // Checks if more links exists via continue.plcontinue\r\n                if(response.continue){\r\n                    // get(response.continue.plcontinue)\r\n                }\r\n            })\r\n            .catch((error) => console.log(error));\r\n    }\r\n\r\n    await get()\r\n    return links\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport {search} from './api'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport './search.css'\r\n\r\nexport default function Search({setGraphData}) {\r\n    var value = null;\r\n    var depth = null;\r\n    const [searchTerm, setSearchTerm] = React.useState(null);\r\n    const [articles, setArticles] = React.useState([]);\r\n\r\n    useEffect(()=>{\r\n        if(searchTerm){\r\n            search(searchTerm).then(res => setArticles(res.query.search))\r\n        }\r\n    }, [searchTerm])\r\n\r\n    return (\r\n        <ul id=\"tool-bar\">\r\n            <li id=\"search-bar\">\r\n                <Autocomplete\r\n                    value={value}\r\n                    onChange={(event, newValue) => {\r\n                        if (typeof newValue === 'string') {\r\n                            value = newValue;\r\n                        } else {\r\n                            value = newValue;\r\n                        }\r\n                    }}\r\n                    options={articles}\r\n                    getOptionLabel={(option) => {\r\n                        if (typeof option === 'string') {\r\n                        return option;\r\n                        }\r\n                        return option.title;\r\n                    }}\r\n                    style={{ width: 300, float: 'right' }}\r\n                    freeSolo\r\n                    renderInput={(params) => (\r\n                        <TextField autoFocus {...params} label=\"wikipedia article\" variant=\"outlined\" onChange={(event)=>setSearchTerm(event.target.value)}/>\r\n                    )}\r\n                />\r\n            </li>\r\n            <li id=\"depth-feild\">\r\n                <TextField id=\"depth-text-field\" label=\"depth\" variant=\"outlined\" onChange={(event)=>depth = event.target.value} style={{maxWidth: 74}}/>\r\n            </li>\r\n            <li>\r\n                <Button id=\"render-button\" variant=\"outlined\" onClick={()=>setGraphData(value, depth)}>\r\n                    Render\r\n                </Button>\r\n            </li>\r\n        </ul>\r\n    );\r\n}","import React from 'react';\r\nimport './preview.css';\r\nimport {pageURL} from './api.js';\r\n\r\nconst Preview = ({node}) => {\r\n    let articleName = node.id.replace(\" \", \"_\");\r\n\r\n    return (\r\n        <div id=\"preview\">\r\n            <iframe id=\"preview-panel\" src={`${pageURL}/${articleName}`} title=\"Preview Page\"></iframe>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preview;","import React from 'react';\r\nimport {InteractiveForceGraph, ForceGraphNode, ForceGraphLink} from 'react-vis-force';\r\nimport Graph from './components/graph';\r\nimport {getLinks} from './components/api'\r\nimport Search from \"./components/search\";\r\nimport Preview from './components/preview';\r\nimport './App.css';\r\n\r\n// fix depth lag\r\n// add size based on connections \r\n// add color based on root node\r\n// add updated poping animation based on rendering graph\r\n// add ability to add and remove nodes -> search list materail ui list\r\n// add ability to click on on node an take to wiki page\r\n// add ability to preview wikipage when hovering\r\n// add ability to change different topic\r\n// render as more responces come in -> dont' think thats possible\r\n// add ML agorhtims for sorting via sentamet/attention/relativeness\r\n\r\nfunction App() {\r\n  const [value, setValue] = React.useState(null)\r\n  const [depth, setDepth] = React.useState(2)\r\n  const [renderedGraph, setRenderedGraph] = React.useState([]);\r\n  const [selectedNode, setSelectedNode] = React.useState(null);\r\n  var allNodes = new Map();\r\n  \r\n  const renderGraph = async (nodes, links) => {\r\n    let graphNodes = await nodes.reduce((result, edge) => {\r\n      if(!allNodes.has(edge.title)){\r\n        allNodes.set(edge.title, edge)\r\n        result.push(<ForceGraphNode node={{id: edge.title, pageid: edge.pageid}} />)\r\n      } \r\n      return result\r\n    }, []);\r\n    \r\n    let graphLinks = await links.map((link)=>{\r\n      return <ForceGraphLink link={{source: link[0], target: link[1]}}/>\r\n    })  \r\n    \r\n    setRenderedGraph(renderedGraph => {\r\n      // the line below eliminates the need to rerender by pressing enter twice, but causes a distored graph\r\n      // renderedGraph.length!==0 ? setRenderedGraph([...renderedGraph, ...graphNodes, ...graphLinks]) : setRenderedGraph([<ForceGraphNode node={{ id: value.title}} fill=\"red\" />, ...graphNodes, ...graphLinks]);\r\n      renderedGraph.length!==0 ? renderedGraph.push(...graphNodes, ...graphLinks) : renderedGraph.push(<ForceGraphNode node={{ id: value.title}} fill=\"red\" />, ...graphNodes, ...graphLinks);  \r\n      return renderedGraph;\r\n    });\r\n  };\r\n\r\n  const setGraphData = (value, depth) => {\r\n    setValue(value)\r\n    setDepth(depth)\r\n  }\r\n\r\n  const getAllLinks = async (rootPage, depth) => {\r\n    const _links = async (page) => {\r\n      let pageLinks = await getLinks(page.pageid);\r\n      let pageGraphNodes = [];\r\n      let pageGraphLinks = [];\r\n      \r\n      pageLinks.forEach((link) => {\r\n        pageGraphNodes.push(link);\r\n        pageGraphLinks.push([link.title, page.title]);\r\n      });\r\n\r\n      return [pageGraphNodes, pageGraphLinks];\r\n    };\r\n\r\n    let pages = [rootPage];\r\n\r\n    for(var i=0; i<depth; i++){\r\n     \r\n      pages = await pages.reduce(async (pageNodes, page) => {\r\n        page = await page;\r\n        let [pageGraphNodes, pageGraphLinks] = await _links(page);\r\n        renderGraph(pageGraphNodes, pageGraphLinks);\r\n\r\n        pageNodes = await pageNodes\r\n        pageNodes.push(pageGraphNodes)\r\n        return pageNodes.flat()\r\n      }, [])\r\n    }\r\n  }\r\n\r\n  React.useEffect(() => (value ? getAllLinks(value, depth) : null), [value]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"search-bar\">\r\n        <Search setGraphData={setGraphData}/>\r\n      </div>\r\n      <div id=\"graph-information\" style={{textAlign: \"center\"}}>\r\n        {selectedNode ? <Preview node={selectedNode} /> : null}\r\n        {renderedGraph.length!==0 ?\r\n        <InteractiveForceGraph\r\n        onSelectNode={(event, node) => setSelectedNode(node)}\r\n        simulationOptions={{ animate: true }}\r\n        \r\n        >\r\n          {renderedGraph}\r\n        </InteractiveForceGraph>\r\n        : console.log(\"Graph not rendered\")}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}